
        if (url == "/")
        {
            client.setResponseType(NO_FD_OBJ);
            client.setDefaultHttpResponse(OK);
        }
        else if (url == "/testMultipleRedirect.html")
        {
            /*if not set path file then it should use default*/
            client.setDefaultHttpResponse(MULTIPLE_REDIRECTS);
            client.setResponseType(NO_FD_OBJ);
            client.addURLRedirection("/first/redirect");
            client.addURLRedirection("/second/redirect");
        }
        else if (url == "/testError.html")
        {
            std::cerr << "-------------" << std::endl;
            client.setPathFile(Path("/home/luis/proyects/webserv/html/500.html"));
            client.setDefaultHttpResponse(BAD_REQUEST);
            client.setResponseType(FILE_OBJ);

        }
        else if (url ==  "/post")
        {
            std::ofstream outfile("output_file.jpeg", std::ios::binary);
            if (outfile.is_open())
            {
                outfile.write(client.getBody().data(), client.getBody().size());
                outfile.close();
                std::cerr << "Binary data written to file.\n";
            }
            client.setDefaultHttpResponse(OK);
            client.setResponseType(NO_FD_OBJ);
        }
        else if (url.find("/Cookies/") != std::string::npos)
        {
            const std::string& cookie = client.getMapValue("Cookie");

            std::cerr << cookie << std::endl;
            if (cookie != "not found")
            {
                std::stringstream   iss(cookie);
                std::string         parser;
                while (getline(iss, parser, ';'))
                {
                    std::cerr << &parser[parser.find_first_not_of(' ')] << std::endl;
                    if (parser.find("lang=") != std::string::npos)
                    {
                        if (parser.find("en-US", parser.find("lang=") + std::strlen("lang=")) != std::string::npos)
                        {
                            client.setPathFile(Path("/workspaces/webserv/html/CookiesHTTPEng.html"));
                        }
                        else
                            client.setPathFile(Path("/workspaces/webserv/html/CookiesHTTPEsp.html"));
                    }

                }
            }
            else
            {
                client.setDefaultHttpResponse(OK);
                client.setPathFile(Path("/workspaces/webserv/html" + client.getURL().substr(client.getURL().find_last_of("/"))));
            }
            std::cerr << client.getPathFile() << std::endl;
            //client.setPathFile("/workspaces/webserv/html" + client.getURL().substr(client.getURL().find_last_of("/")));
            client.setResponseType(FILE_OBJ);
        }
        else if (url == "/index.html" or url == "/hellow/you/nice")
        {
            client.setDefaultHttpResponse(OK);
            client.setPathFile(Path("/workspaces/webserv/html/index.html"));
            client.setResponseType(FILE_OBJ);
        }
        else if (url == "/nolen.py")
        {
            client.setDefaultHttpResponse(OK);
            client.setPathFile(Path("/workspaces/webserv/CGI/noexiste.py"));
            client.setResponseType(CGI_OBJ);
        }
        else if (url == "/nolenroot.py")
        {
            client.setDefaultHttpResponse(OK);
            client.setPathFile(Path("/nolen.py"));
            client.setResponseType(CGI_OBJ);
        }